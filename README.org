#+TITLE: rspb: Really Simple PasteBin

* Deploy
On itself, rspb does not require any external programs to run. However, for performance sake, you may want to utilize a Redis instance for caching small pastes in memory.

rspb requires a config file. Here's an example:
#+BEGIN_SRC conf-toml
base_dir = "/home/sya/Temp/paste"
redis_address = "unix:///run/redis/redis.sock" # Drop this line if you don't want Redis as cache
bind_address = "127.0.0.1:8080"

[admins]
admin1 = "92716e2df3016f0e45a8b2944207f12b7b4c3c735746120685aa35d3199b555892d14b9effdc42d6f8b6b8ac7965eb94c5fd077384c17771b7559e6260d64021"
admin2 = "6309d125089d37d2bca10e9ec714d1c69174fa1ae653efaef514ebc2edba74e7ba237c6287ca22306e2536b52fa990ea7f3a6cad5a9330637b871feb019bd239"

[site] # Used to render web pages
name = "Random Pastebin"
description = "Paste stuff here, no guarantee."
url = "localhost:8080"
#+END_SRC

The ~admins~ section records admin name and BLAKE2b-hashed passwords. These can be used to list all pastes currently on the server and modify them without paste-specific keys. Passwords can be generated by ~echo -n PASSWORD | b2sum~.

** Redis configuration
We need to configure Redis to evict keys so that it won't oom the server.

#+BEGIN_SRC conf
maxmemory 100mb # Set according to your server
maxmemory-policy allkeys-lru
#+END_SRC

* API
** Paste CURD
*** Get Paste
GET/{id}

*** Create paste
POST /

Use ~form-data/multipart~ to upload the content.

Form fields:
+ *content* or *c* Necessary, the content.
+ *name* Optional, specify the name of the paste.
+ *expire-after* Optional, used to set time (in minutes) of expire (from the time of creation).

**** Response
A typical success request would look like this:
#+BEGIN_SRC json
{
  "success": true,
  "message": null,
  "info": {
    "id": "fcmg0q",
    "key": "NbzeQTHTNq",
    "expire_time": "2021-01-04T04:34:50.343851892Z"
  }
}
#+END_SRC

If syntax highlighting failed, ~success~ field will still report ~true~ but message will contain a message =Syntax highlighting failed.=.

*** Modify paste
PUT /{id}   

Use ~form-data/multipart~ to upload the content to replace the current one.

Headers:
+ *Key* Necessary. The key you obtain from creating the paste. All operations will require a valid key.

Form fields:
+ *content* or *c* Optional. The content you wish to replace with.
+ *name* Optional. Modify the name of the paste.
+ *expire-after* Optional. Set it if you want to renew the paste to be expired after given time from now.
  - Follows the same time format as in create paste headers.

**** Response
A typical success response:
#+BEGIN_SRC json
{
  "success": true,
  "message": null
}
#+END_SRC

*** Delete paste
DELETE /{id}

Delete the paste NOW.

Headers:
+ *Key* Necessary, the key obtained when creating the paste.

**** Response
A typical success response:
#+BEGIN_SRC json
{
  "success": true,
  "message": null
}
#+END_SRC

** Admin
All requests inside this section requires valid admin username-password pair. Authentication is sent via HTTP Simple Auth. Wrong credentials will result in 401 error.

*** List all pastes
GET /admin/stats

Gives a list of all currently available pastes.

**** Response
A typical success response:
#+BEGIN_SRC json
{
  "success": true,
  "message": "",
  "info": [
    {
      "size": 12,
      "id": "hisrge",
      "name": "paste1",
      "atime": "2021-02-07T13:08:22.206880003Z",
      "expire_time": "2021-02-07T13:51:55.673761658Z",
      "create_time": "2021-02-07T12:51:55.674597298Z"
    },
    {
      "size": 14659,
      "id": "jc5val",
      "name": "paste2",
      "atime": "2021-02-07T13:08:48.376837080Z",
      "expire_time": "2021-02-07T13:52:29.726596002Z",
      "create_time": "2021-02-07T12:52:29.727157429Z"
    }
  ]
}
#+END_SRC

*** Paste CURD
{PUT, DELETE} /admin/{paste_id}

Same as normal paste modification, but requires admin credentials instead of paste-specific key.
